Class Minheap:
    def __init__(self):
        self.H = []
    def size(self):
        return len(self.H)
    def __repr__(self):
        return str(self.H)
    def satisfies_assertions(self):
        if self.size()==1:
            return
        for i in range(1,len(self.H)):
            assert self.H[i]>=self.H[i//2], f'Min heap fails at position {i//2}, parent: {self.H[i//2]}, child: {self.H[i]}'
    def min_element(self):
        return self.H[0]
    ## bubble_up
    def bubble_up(self,index):
        assert index>=0
        if index ==0:
            return
        parent_index = index//2
        if self.H[parent_index]<self.H[index]:
            return
        else:
            self.H[parent_index],self_H[index]=self.H[index],self.H[parent_index]
            self.bubble_up(parent_index)
    ## bubble down
    def bubble_down(self,index):
    ## if parent is already smaller than both child, return
        lchild_idx = index*2
        rchild_idx = index*2+1
        if lchild_idx>self.size():
            return
        elif rchild_idx>self.size():
            if self.H[index]>self.H[lchild_idx]:
                tmp = self.H[index]
                self.H[index]= self.H[lchild_idx]
                self.H[lchild_idx]=tmp
                return
            else:
                return
        if self.H[index]<=self.H[lchild_idx] and self.H[index]<=self.H[rchild_idx]:
            return
        if self.H[lchild_idx]<self.H[rchild_idx]:
            tmp = self.H[index]
            self.H[index]=self.H[lchild_idx]
            self.H[lchild_idx]=tmp
            self.bubble_down(lchild_idx)
        else:
            tmp = self.H[index]
            self.H[index]=self.H[rchild_idx]
            self.H[rchild_idx]=tmp
            self.bubble_down(rchild_idx)
    ## Function: heap_insert
    ## insert elt into heap
    ## use bubble_up/bubble_down function
    def insert(self,elt):
        self.H.append(elt)
        selt.bubble_up(len(self.H)-1)
    ## Function: heap_delete_min
    ## delete the smallest element in the heap, use bubble_up/bubble_down
    def delete_min(self):
        if len(self.H)<=1:
            self.H.pop()
        else:
            self.H[0]=self.H[len(self.H)-1]
            self.H.pop()
            self.bubble_down(0)
