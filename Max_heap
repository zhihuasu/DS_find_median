class MaxHeap:
    def __init__(self):
        self.H=[None]
    def size(self):
        return len(self.H)
    def __repr__(self):
        return str(self.H)
    def satisfies_assertion(self):
        for i in range(2,self.H):
            assert self.H[i]<=self.H[i//2], f'max Heap failed at {i//2}, parent: {i//2}, child: {i}'
    def max_element(self):
        return self.H[1]
    ## bubble_up
    def bubble_up(self,index):
        assert index>=1
        if index ==1:
            return
        parent_index = index//2
        if self.H[parent_index]>self.H[index]:
            return
        else:
            self.H[parent_index],self.H[index]=self.H[index],self.H[parent_index]
            self.bubble_up(parent_index)
    ## bubble_down
    def bubble_down(self,index):
        assert index>=1
        lchild_idx = index*2
        rchild_idx = index*2+1
        if lchild_idx>self.size():
            return
        elif rchild_idx>self.size():
            if self.H[index]<self.H[lchild_idx]:
                tmp = self.H[index]
                self.H[index]= self.H[lchild_idx]
                self.H[lchild_idx]=tmp
                return
            else:
                return
        if self.H[index]>=self.H[lchild_idx] and self.H[index]>=self.H[rchild_idx]:
            return
        if self.H[lchild_idx]>=self.H[rchild_idx]:
            tmp =self.H[index]
            self.H[index]=self.H[lchild_idx]
            self.H[lchild_idx]=tmp
            self.bubble_down(lchild_idx)
        else:
            tmp = self.H[index]
            self.H[index]=self.H[rchild_idx]
            self.H[rchild_idx]=tmp
            self.bubble_down(rchild_idx)
    ## function: heap_insert, using bubble_up and bubble_down function
    def insert(elt):
        self.H.append(elt)
        self.bubble_up(len(self.H)-1)
    ## function: heap_delete_max, delete maximum element in the heap, using bubble_up and bubble_down
    def delete_max(self):
        if len(self.H)<=1:
            self.H.pop()
        else:
            self.H[0]=self.H[len(self.H)-1]
            self.H.pop()
            self.bubble_down(0)
